;;;
;;;  Robot's updating procedure, which defines the rules of its behaviors
;;;
to reactive-wolf-loop

  let rand random 10
  ifelse redHood-in-sight-90?
  [
    if free-floor-ahead?
      [move-ahead]
   ]
  [
    ifelse redHood-in-sight-270?
      [ifelse (rand <= 5)
        [rotate-left]
        [rotate-right]
      ]
      [ifelse redHood-in-sight-360?
        [rotate-backwards]
        ;; NAO ENCONTROU A REDHOOD 
        [ifelse not free-floor-ahead?
          [ifelse (rand <= 5)
            [rotate-left]
            [rotate-right]
          ]
          [
            ifelse (rand <= 5)
            [move-ahead]
            [ifelse (rand <= 7.5)
              [rotate-left]
              [rotate-right]
            ]
          ]
        ]
      ]
  ]
  ifelse redHood-in-sight-360?
     [set color orange]
     [set color blue]
end


;;; ------------------------
;;;   Sensors
;;; ------------------------
;;;


;;;
;;; check free floor ahead
;;;
to-report free-floor-ahead?
    let ahead (patch-ahead 1)
    report ([kind] of ahead = ROOM_FLOOR) and (not any? turtles-on ahead)
end

;;;
;;;check wall-ahead
;;;
to-report wall-ahead?
  let ahead (patch-ahead 1)
  report ([kind]of ahead = WALL)
end

;;;
;;;check wolf ahead
;;;
to-report wolf-ahead?
  let ahead (patch-ahead 1)
  report(any? wolfs-on ahead)
end

;;;
;;;check redHood in sight 90ยบ
;;;
to-report redHood-in-sight-90?
  let goal redHoods in-cone MAX_VISION 90
  report(any? goal)
end

;;;
;;;check redHood in 270 degrees
;;;
to-report redHood-in-sight-270?
  let goal redHoods in-cone MAX_VISION 270
  report(any? goal)
end

;;;
;;;check redHood in 360 degrees
;;;
to-report redHood-in-sight-360?
  let goal redHoods in-cone MAX_VISION 360
  report(any? goal)
end

;;;
;;;check if wolf is adjacent to redhood
;;;
to-report wolf-adjacent-to-redHood?
  let goal neighbors4
  report (any? redHoods-on goal)
end

;;;
;;; check if wolf was adjacent to redhood
;;;
to-report was-adjacent-to-redHood
  ifelse (my-last-adjacent > 0)
    [report true]
    [report false]
end


;;;
;;; ------------------------
;;;   Actuators
;;; ------------------------
;;;

;;;
;;;  Move the robot forward
;;;
to move-ahead
  ask patch-here [set has-wolf 0]
  fd 1
  ask patch-here [set has-wolf 1]
end

;;;
;;; Rotate robot right
;;;
to rotate-right
  rt 90
end

;;;
;;; Rotate robot left
;;;
to rotate-left
  lt 90
end

;;;
;;; Rotate robot backwards
;;;
to rotate-backwards
  lt 180
end

;;;
;;; mark adjacent redhood position as occupied
;;;
to set-adjacent-position-occupied
  let redhood-x [xcor] of turtle 0
  let redhood-y [ycor] of turtle 0
  
  let dif-x redhood-x - xcor
  let dif-y redhood-y - ycor
  
  ifelse (dif-x < 0)
    [ask turtle 0 [set east 1] ;;; this is just a boolean (1 if true, 0 if false)
     set my-last-adjacent 3 ;;; east is value 3 
    ]
    [ifelse (dif-x < 0)
      [ask turtle 0 [set west 1]
       set my-last-adjacent 4
      ]
      [ifelse (dif-y < 0)
        [ask turtle 0 [set north 1]
         set my-last-adjacent 1
        ]
        [ask turtle 0 [set south 1]
         set my-last-adjacent 2
        ]
      ]
    ]
end

;;;
;;; mark past adjacent position as null (0)
;;;
to mark-as-not-adjacent
  ifelse (my-last-adjacent = 1)
    [ask turtle 0 [set north 0]]
    [ifelse (my-last-adjacent = 2)
      [ask turtle 0 [set south 0]]
      [ifelse (my-last-adjacent = 3)
        [ask turtle 0 [set east 0]]
        [if (my-last-adjacent = 4) 
          [ask turtle 0 [set west 0]]
       ]
      ]
    ] 
  set my-last-adjacent 0
end

;;;
;;; do nothing
;;;
to do-nothing
end

;;;
;;; continue seeking when a wolf has a temporary goal
;;;
to continue-seeking

  let north-x xcor
  let north-y xcor + 1
  let south-x xcor
  let south-y ycor - 1
  let east-x xcor + 1
  let east-y ycor
  let west-x xcor - 1
  let west-y ycor
  set last-rh-pos []  
  ;let north-neighbor wolfs at-points [[north-x north-y]]
  ;let south-neighbor wolfs at-points [[south-x south-y]]
  ;let east-neighbor wolfs at-points [[east-x east-y]]
  ;let west-neighbor wolfs at-points [[west-x west-y]]
  let rand-index random 4
  let rand 0
  if (rand-index = 0) [set rand 0]
  if (rand-index = 1) [set rand 90]
  if (rand-index = 2) [set rand 180]
  if (rand-index = 3) [set rand 270]
  
  ifelse free-floor-ahead?
    [move-ahead]
    [set heading rand] 
end



;;;
;;; wolf is seeing redhood but cannot move forward. has to find another position
;;;

to choose-best-alternative
  let redHood-x [xcor] of turtle 0
  let redHood-y [ycor] of turtle 0
  
  let north-rh [north] of turtle 0
  let south-rh [south] of turtle 0
  let east-rh [east] of turtle 0
  let west-rh [west] of turtle 0
  
  ifelse (north-rh = 0)
    [avoid-other-wolfs 1
     set goal-x redHood-x
     set goal-y redHood-y + 1]
    [ifelse (east-rh = 0)
      [avoid-other-wolfs 3
      set goal-x redHood-x + 1
      set goal-y redHood-y]
      [ifelse (west-rh = 0)
        [avoid-other-wolfs 4
          set goal-x redHood-x - 1
          set goal-y redHood-y]
        [if (south-rh = 0)
          [avoid-other-wolfs 2
            set goal-x redHood-x
            set goal-y redHood-y - 1]
        ]
      ]
    ]
end


;;;
;;; avoid other-wolfs when close to redhood
;;;
to avoid-other-wolfs [direction]
  let goalX xcor
  let goalY ycor
  
  ifelse (direction = 1)
    [set goalY goalY + 1]
    [ifelse (direction = 2)
      [set goalY goalY - 1]
      [ifelse (direction = 3)
        [set goalX goalX + 1]
        [set goalX goalX - 1]
      ]
    ]
    
  facexy goalX goalY
end