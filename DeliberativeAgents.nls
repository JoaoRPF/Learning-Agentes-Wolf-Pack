;;;
;;;  Robot's updating procedure, which defines the rules of its behaviors
;;;
to deliberative-wolf-loop
  let rand random 10
  ifelse redHood-in-sight-90? and free-floor-ahead?
    [move-ahead]
    [ifelse redHood-in-sight-360?
      [turn-goal]
      [ifelse (rand <= 5)
        [move-ahead]
        [ifelse rand <= 7.5 
          [rotate-right]
          [rotate-left]
        ]
      ]
    ]
  ifelse redHood-in-sight-360?
    [set color orange]
    [set color blue]
      
end



;;;
;;;  Turn robot to goal
;;;
to turn-goal
  let goalX [xcor] of turtle 0 - xcor
  let goalY [ycor] of turtle 0 - ycor

    ifelse abs(goalX) = abs(goalY)
    [let rand random 10
      ifelse rand < 5
      [ifelse goalX > 0
        [set heading 90]
        [set heading 270]
        ]
      [ifelse goalY > 0
        [set heading 0]
        [set heading 180]
        ]
      ]
    [ifelse abs(goalX) > abs(goalY)
      [ifelse goalX > 0
        [set heading 90]
        [set heading 270]
        ]
      [ifelse goalY > 0
        [set heading 0]
        [set heading 180]
        ]
     ]
end
