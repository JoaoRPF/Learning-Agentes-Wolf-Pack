to-report random-next-patch
  let my-neighbors []
  set my-neighbors lput patch-here my-neighbors
  set my-neighbors lput patch-at 1 0 my-neighbors
  set my-neighbors lput patch-at -1 0 my-neighbors
  set my-neighbors lput patch-at 0 1 my-neighbors
  set my-neighbors lput patch-at 0 -1 my-neighbors
  
  report one-of my-neighbors
end

to-report deliberative-heading-wolf-loop
  let rand random 10
  let d 0
  
  if (not empty? last-rh-pos) and (xcor = item 0 last-rh-pos ) and (ycor = item 1 last-rh-pos)
     [set last-rh-pos []]
  
  ifelse wolf-adjacent-to-redHood?
    [ set have-goal? 0
      ifelse was-adjacent-to-redHood
        [set d 0]
        [set-adjacent-position-occupied]
    ]
    [ mark-as-not-adjacent
      ifelse (in-same-pos >= 5)
      [ifelse ((rand <= 5) and free-floor-ahead?)
              [set d patch-ahead 1]
              [ifelse rand <= 7.5
                [rotate-left]
                [rotate-right]
              ]]
      [ifelse redHood-in-sight-360?
        [find-shortest-path who
         set d item 1 best-path]
         [ifelse (not empty? last-rh-pos)
            [set d seek-pos-heading]
            [ifelse ((rand <= 5) and free-floor-ahead?)
              [set d patch-ahead 1]
              [ifelse rand <= 7.5
                [rotate-left]
                [rotate-right]
              ]
            ]
         ]
      ]
    ]
      
  ifelse redHood-in-sight-360?
    [set color orange]
    [ifelse (not empty? last-rh-pos)
    [set color green]
    [set color blue]]
    
    set in-same-pos (in-same-pos + 1)
    
    ifelse(patch-ahead 1 = d)
    [report d]
    [ if (d != 0) [face d]
      report 0]
end

;;;
;;;  Robot's updating procedure, which defines the rules of its behaviors
;;;
to-report deliberative-wolf-loop
  let rand random 10
  let d 0
  
  if (not empty? last-rh-pos) and (xcor = item 0 last-rh-pos ) and (ycor = item 1 last-rh-pos)
     [set last-rh-pos []]
  
  ifelse wolf-adjacent-to-redHood?
    [ set have-goal? 0
      ifelse was-adjacent-to-redHood
        [set d 0]
        [set-adjacent-position-occupied]
    ]
    [ mark-as-not-adjacent
      ifelse (in-same-pos >= 5)
        [set d random-next-patch]
        [ifelse redHood-in-sight-360?
          [ find-shortest-path who
            set d item 1 best-path]
          [ifelse (not empty? last-rh-pos)
            [set d seek-pos]
            [set d random-next-patch]
          ]
        ]
    ]
      
  ifelse redHood-in-sight-360?
    [set color orange]
    [ifelse (not empty? last-rh-pos)
      [set color green]
      [set color blue]]
    
    set in-same-pos (in-same-pos + 1)
    
    report d
end

;;;
;;;  seek last known position for redHood
;;;
to-report seek-pos
  let goalX item 0 last-rh-pos - xcor
  let goalY item 1 last-rh-pos - ycor
  let otherGoalX (2 * max-pxcor + 1) - abs(goalX)
  let otherGoalY (2 * max-pycor + 1) - abs (goalY)
  let compareX 0
  let compareY 0
  
  let d 0
  
  ifelse (otherGoalX >= abs(goalX))
  [set compareX goalX]
  [set compareX otherGoalX]
  
  ifelse (otherGoalY >= abs(goalY))
  [set compareY goalY]
  [set compareY otherGoalY]
  
  ifelse abs(compareX) = abs(compareY)
    [let rand random 10
      ifelse (rand <= 5)
      [ifelse goalX > 0
        [ifelse (otherGoalX > goalX)
          [set d patch-at 1 0]
          [set d patch-at -1 0]
        ]
        [ifelse (otherGoalX > abs(goalX))
          [set d patch-at -1 0]
          [set d patch-at 1 0]
        ]
      ]
      [ifelse goalY > 0
        [ifelse (otherGoalY > goalY)
          [set d patch-at 0 1]
          [set d patch-at 0 -1]
        ]
        [ifelse (otherGoalY > abs(goalY))
          [set d patch-at 0 -1]
          [set d patch-at 0 1]
        ]
      ]
    ]
    [ifelse abs(compareX) > abs(compareY)
      [ifelse goalX > 0
        [ifelse (otherGoalX > goalX)
          [set d patch-at 1 0]
          [set d patch-at -1 0]
        ]
        [ifelse (otherGoalX > abs(goalX))
          [set d patch-at -1 0]
          [set d patch-at 1 0]
        ]
      ]
      [ifelse goalY > 0
        [ifelse (otherGoalY > goalY)
          [set d patch-at 0 1]
          [set d patch-at 0 -1]
        ]
        [ifelse (otherGoalY > abs(goalY))
          [set d patch-at 0 -1]
          [set d patch-at 0 1]
        ]
      ]
    ]
  
  if (xcor = item 0 last-rh-pos) and (ycor = item 1 last-rh-pos)
    [set last-rh-pos []]
  
  report d
end

to-report seek-pos-heading
  let goalX item 0 last-rh-pos - xcor
  let goalY item 1 last-rh-pos - ycor
  let otherGoalX (2 * max-pxcor + 1) - abs(goalX)
  let otherGoalY (2 * max-pycor + 1) - abs (goalY)
  let compareX 0
  let compareY 0
  
  let d 0
  
  ifelse (otherGoalX >= abs(goalX))
  [set compareX goalX]
  [set compareX otherGoalX]
  
  ifelse (otherGoalY >= abs(goalY))
  [set compareY goalY]
  [set compareY otherGoalY]
  
  ifelse abs(compareX) = abs(compareY)
    [let rand random 10
      ifelse ( (heading = 90) or (heading = 270) )
      [ifelse goalX > 0
        [ifelse (otherGoalX > goalX)
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 90]
          ]
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 270]
          ]
        ]
        [ifelse (otherGoalX > abs(goalX))
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 270]
          ]
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 90]
          ]
        ]
      ]
      [ifelse goalY > 0
        [ifelse (otherGoalY > goalY)
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 0]
          ]
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 180]
          ]
        ]
        [ifelse (otherGoalY > abs(goalY))
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 180]
          ]
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 0]
          ]
        ]
      ]
    ]
    [ifelse abs(compareX) > abs(compareY)
      [ifelse goalX > 0
        [ifelse (otherGoalX > goalX)
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 90]
          ]
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 270]
          ]
        ]
        [ifelse (otherGoalX > abs(goalX))
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 270]
          ]
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 90]
          ]
        ]
      ]
      [ifelse goalY > 0
        [ifelse (otherGoalY > goalY)
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 0]
          ]
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 180]
          ]
        ]
        [ifelse (otherGoalY > abs(goalY))
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 180]
          ]
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [set d patch-ahead 1]]
            [set heading 0]
          ]
        ]
      ]
     ]
     
    if (xcor = item 0 last-rh-pos) and (ycor = item 1 last-rh-pos)
       [set last-rh-pos []]
       
    report d
end




