;;;
;;;  Robot's updating procedure, which defines the rules of its behaviors
;;;
to deliberative-wolf-loop
  let rand random 10
  
  if (not empty? last-rh-pos) and (xcor = item 0 last-rh-pos ) and (ycor = item 1 last-rh-pos)
     [set last-rh-pos []]
  
  ifelse wolf-adjacent-to-redHood?
    [ set have-goal? 0
      ifelse was-adjacent-to-redHood
        [do-nothing]
        [set-adjacent-position-occupied]
    ]
    [ mark-as-not-adjacent
      ifelse redHood-in-sight-90?
        [ifelse free-floor-ahead?
          [ set have-goal? 0
            move-ahead]
          [ ifelse (have-goal? = 1)
              [continue-seeking]
              [set have-goal? 1
               choose-best-alternative]
          ]
         ]
        [ifelse redHood-in-sight-360?
          [ifelse free-floor-ahead?
            [ ifelse (have-goal? = 1)
              [continue-seeking]
              [turn-goal [xcor] of turtle 0 [ycor] of turtle 0]
            ]
            [ set have-goal? 1
              choose-best-alternative]
          ]
          [ set have-goal? 0
            ifelse (not empty? last-rh-pos)
            [seek-pos]
            [ifelse ((rand <= 5) and free-floor-ahead?)
              [move-ahead]
              [ifelse rand <= 7.5
                [rotate-left]
                [rotate-right]
              ]
            ]
          ]
        ]
     ]
      
  ifelse redHood-in-sight-360?
    [set color orange]
    [ifelse (not empty? last-rh-pos)
    [set color green]
    [set color blue]]
end

;;;
;;;  Turn robot to goal
;;;
to turn-goal [x y]
  let goalX x - xcor
  let goalY y - ycor
  let otherGoalX (2 * max-pxcor + 1) - abs(goalX)
  let otherGoalY (2 * max-pycor + 1) - abs (goalY)
  let compareX 0
  let compareY 0
  
  ifelse (otherGoalX >= abs(goalX))
  [set compareX goalX]
  [set compareX otherGoalX]
  
  ifelse (otherGoalY >= abs(goalY))
  [set compareY goalY]
  [set compareY otherGoalY]
  
  if(memory-last-pos) [set last-rh-pos list x y]
  
  ifelse abs(compareX) = abs(compareY)
    [let rand random 10
      ifelse rand < 5
        [facexy [xcor] of turtle 0 ycor]
        [facexy xcor [ycor] of turtle 0]
    ] 
    [ifelse abs(compareX) > abs(compareY)
      [facexy [xcor] of turtle 0 ycor]
      [facexy xcor [ycor] of turtle 0]
     ]
end

;;;
;;;  seek last known position for redHood
;;;
to seek-pos
  let goalX item 0 last-rh-pos - xcor
  let goalY item 1 last-rh-pos - ycor
  let otherGoalX (2 * max-pxcor + 1) - abs(goalX)
  let otherGoalY (2 * max-pycor + 1) - abs (goalY)
  let compareX 0
  let compareY 0
  
  ifelse (otherGoalX >= abs(goalX))
  [set compareX goalX]
  [set compareX otherGoalX]
  
  ifelse (otherGoalY >= abs(goalY))
  [set compareY goalY]
  [set compareY otherGoalY]
  
  ifelse abs(compareX) = abs(compareY)
    [let rand random 10
      ifelse ( (heading = 90) or (heading = 270) )
      [ifelse goalX > 0
        [ifelse (otherGoalX > goalX)
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 90]
          ]
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 270]
          ]
        ]
        [ifelse (otherGoalX > abs(goalX))
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 270]
          ]
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 90]
          ]
        ]
      ]
      [ifelse goalY > 0
        [ifelse (otherGoalY > goalY)
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 0]
          ]
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 180]
          ]
        ]
        [ifelse (otherGoalY > abs(goalY))
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 180]
          ]
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 0]
          ]
        ]
      ]
    ]
    [ifelse abs(compareX) > abs(compareY)
      [ifelse goalX > 0
        [ifelse (otherGoalX > goalX)
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 90]
          ]
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 270]
          ]
        ]
        [ifelse (otherGoalX > abs(goalX))
          [ifelse(heading = 270)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 270]
          ]
          [ifelse(heading = 90)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 90]
          ]
        ]
      ]
      [ifelse goalY > 0
        [ifelse (otherGoalY > goalY)
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 0]
          ]
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 180]
          ]
        ]
        [ifelse (otherGoalY > abs(goalY))
          [ifelse(heading = 180)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 180]
          ]
          [ifelse(heading = 0)
            [if (free-floor-ahead?) [move-ahead]]
            [set heading 0]
          ]
        ]
      ]
     ]
    
    ;print "Who am i"
    ;print who
    ;print "My x"
    ;print item 0 last-rh-pos
    ;print "My y"
    ;print item 1 last-rh-pos
     
    if (xcor = item 0 last-rh-pos) and (ycor = item 1 last-rh-pos)
       [set last-rh-pos []]
  
  
end