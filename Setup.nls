;;;
;;;  Global variables and constants
;;;
globals [averageSteps totalSteps episodes ROOM_FLOOR WALL]

;;;
;;;  Declare two types of turtles
;;;
breed [ wolfs wolf ]
breed [ redHoods redHood ]

;;;
;;;  Declare cells' properties
;;;
patches-own [kind]

;;;
;;;  Declare turtles' properties
;;;
wolfs-own [last-rh-pos]

;;;
;;;  Reset the simulation
;;;
to reset
  ;; (for this model to work with NetLogo's new plotting features,
  ;; __clear-all-and-reset-ticks should be replaced with clear-all at
  ;; the beginning of your setup procedure and reset-ticks at the end
  ;; of the procedure.)
  ;;__clear-all-and-reset-ticks
  clear-all
  reset-ticks
  set-globals
  setup-patches
  setup-turtles
  ;;ask wolfs [init-wolf]
end

;;;
;;;  Reset the simulation
;;;
to restart
  ;; (for this model to work with NetLogo's new plotting features,
  ;; __clear-all-and-reset-ticks should be replaced with clear-all at
  ;; the beginning of your setup procedure and reset-ticks at the end
  ;; of the procedure.)
  ;;__clear-all-and-reset-ticks
  clear-patches
  clear-turtles
  reset-ticks
  setup-patches
  setup-turtles
  ;;ask wolfs [init-wolf]
end

;;;
;;;  Setup all the agents.
;;;
to setup-turtles

   set-default-shape redHoods "default"

  create-redHoods 1

  ;; set redHood 1
  ask turtle 0 [set color red]
  ask turtle 0 [set xcor 0]
  ask turtle 0 [set ycor 0]
  ask turtle 0 [set heading 90]

  set-default-shape wolfs "default"

  create-wolfs 4

  ;; set wolf 1
  ask turtle 1 [set color blue]

  let px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  let py ((0 - random MAPBOUNDS) + random MAPBOUNDS)

  let p patch px py

  while [any? turtles-on p]
  [set px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set py ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set p patch px py]

  ask turtle 1 [set xcor px]
  ask turtle 1 [set ycor py]
  ask turtle 1 [set heading 90]
  ask turtle 1 [set last-rh-pos []]
  ask turtle 1 [set shape "arrow"]

  ;; set wolf 2
  ask turtle 2 [set color green]

  set px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set py ((0 - random MAPBOUNDS) + random MAPBOUNDS)

  set p patch px py

  while [any? turtles-on p]
  [set px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set py ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set p patch px py]

  ask turtle 2 [set xcor px]
  ask turtle 2 [set ycor py]
  ask turtle 2 [set heading 90]
  ask turtle 2 [set last-rh-pos []]
  ask turtle 2 [set shape "airplane"]

  ;; set wolf 3
  ask turtle 3 [set color black]

  set px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set py ((0 - random MAPBOUNDS) + random MAPBOUNDS)

  set p patch px py

  while [any? turtles-on p]
  [set px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set py ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set p patch px py]

  ask turtle 3 [set xcor px]
  ask turtle 3 [set ycor py]
  ask turtle 3 [set heading 90]
  ask turtle 3 [set last-rh-pos []]
  ask turtle 3 [set shape "default"]

  ;; set wolf 4

  set px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set py ((0 - random MAPBOUNDS) + random MAPBOUNDS)

  set p patch px py

  while [any? turtles-on p]
  [set px ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set py ((0 - random MAPBOUNDS) + random MAPBOUNDS)
  set p patch px py]

  ask turtle 4 [set color gray]
  ask turtle 4 [set xcor px]
  ask turtle 4 [set ycor py]
  ask turtle 4 [set heading 90]
  ask turtle 4 [set last-rh-pos []]
  ask turtle 4 [set shape "turtle"]

end


;;;
;;;  Setup the environment. Populate the room.
;;;
to setup-patches
  ;; Build the floor
  ask patches [
    set kind ROOM_FLOOR
    set pcolor gray + 4 ]
end

;;;
;;;  Set global variables' values
;;;
to set-globals
  set averageSteps 0
  set totalSteps 0
  set episodes 0
  set ROOM_FLOOR 0
  set WALL 1
end